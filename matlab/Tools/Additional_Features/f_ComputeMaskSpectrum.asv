function f_ComputeMaskSpectrum(x,y,mask,abs_ang,maskFTlog,FTmask)
% Computes the spectrum of a complex mask with severak features as
% profiles, log scale and phase/angle plots
% 
% Inputs:
% x,y: cartesian coordinate vectors
% mask: function to be plotted. It is wrapped on [-pi,pi] if abs_ang = 2.
%       Complex structure that has not been truncated.
%       mask = exp(i*UnwrappedMask)
% abs_ang: custom(0)[str has to be defined for this case], magnitude
%           (1) or phase (2) plot. Doesn't apply for Zernike and LG +
%           Zernike.
% maskFTlog: boolean for optionally plotting with log scale. 
% FTmask: boolean for activating this function


if FTmask == 1
%% Inputs
if maskFTlog == 1
 tol = 1; % Tolerance of each side when plotting the FFT profiles since 
          % some values may tend to -infinity when masFTlog = 1
else
 tol = 0; % tol is an index, so it must be an integer and is not needed for
          % a non-log scale
end

 %% Fourier transform
 FFT2D = @(s) ifftshift((fft2(fftshift(s)))); % 2D Fourier Transform
 maskFFT = FFT2D(mask); % FT of the mask (not wrapped)
 switch abs_ang
     case 0 % No operation, custom input (assumed to be non complex)  
         mask = real(maskFFT); % Real part of the FT
         if maskFTlog == 1
           logmask = 10*log10(mask); % Magnitude squared of the FT in
                                     % log scale
           mask = logmask; % Logarithm of the real part
           tit = 'Log of the real part of the FT of the Mask';
         else
           tit = 'Real part of the FT of the Mask';
         end
         warning('abs_ang = 0 is not valid for FTmask = 1, plotting anyways its real part...');
     case 1 % Amplitude
         mask = abs(maskFFT); % Magnitude of the FT
         if maskFTlog == 1
           logmask = 20*log10(mask); % Magnitude squared of the FT in
                                        % log scale
           mask = logmask; % Logarithm of the magnitude squared 
           tit = 'Log of the FT of the Mask';
         else
           tit = 'Magnitude of the FT of the Mask';
         end
     case 2 % Phase
         mask = angle(maskFFT); % Phase of the FT
         tit = 'Phase of the FT of the Mask';
 end
 
%% Plot the mask and take a horizontal and a vertical profile
plotData = 1; % Plots the mask
plotH = 1; % Plot the horizontal profile
plotV = 1; % Plot the vertical profile
oneSideProfile = 0; % Two-sided profile
[~,~] = f_makeImageProfile(x,y,mask,tol,tit,plotData,plotH,plotV,oneSideProfile);
%  figure; imagesc(mask); title(tit); % colormap(hot);

 %% Mid and max points of the mask
%  [maxX, maxY] = size(mask);
%  midX = round((maxX+1)/2) + mod(maxX,2);
%  midY = round((maxY+1)/2) + mod(maxY,2);

 %% Profiles of the 2D image
%  hold on
%  % Horizontal:
%  line([1,maxY],[midX,midX],'LineWidth',3,'Color','blue','LineStyle','--'); 
%  % Vertical:
%  line([midY,midY],[1,maxX],'LineWidth',3,'Color','red','LineStyle','--'); 
%  hold off

 %% Horizontal profile
%  figure;
%  f = improfile(mask,[1,maxY],[midX,midX]);
%  plot(x(1+tol:end-tol),f(1+tol:end-tol)); 
%  title(['Horizontal profile of the' tit]); 

 %% Vertical profile
%  figure;
%  g = improfile(mask,[midY,midY],[1,maxX]);
%  plot(y(1+tol:end-tol),g(1+tol:end-tol)); 
%  title(['Vertical profile of the' tit]);
 
  %% OLD
 % a = abs(FFT2D((exp(1*1i*phi))));
 % b = 20*log10(a);
 % figure;
 % imagesc(b);
 % figure;
 % g = improfile(b,[1,1023],[512,512]);
 % plot(g)
end
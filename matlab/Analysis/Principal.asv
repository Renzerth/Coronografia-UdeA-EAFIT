%% Phase Mask SLMs Display and Free-Space Simulation of two stars
% Inputs:
% See "Paramters.m"
%
% Outputs:
%  Plots on the PC or on the SLMs
%  Processed vortex images (or plots)
%
% Notes:
%  Units: a.u (arbitrary units) and cm for lengths, radians for angles and
%  um for wavelengths
%  Helicoidal phase masks are inside the Laguerre-Gauss beams category
%  The variable mask is complex and is wrappped: mask = exp(i*mask)
%  All wrappped phases are shown on [-pi,pi] 
%  Always execute the program whenver you are exactly inside its folder
%
% Folders:
%  Analysis: principal scripts
%  Data: the inputs of the algorithm are the acquired vortex images
%  Data -> DatalogDir: specific measurement folder 
%  Output: processed images or plots
%  Output -> ProcessedDir: specific processed images folder
%  Tools: functions used in the program
%
% Bugs:
%  When the ticks of -pi, ..., pi are shown, sometimes the may move
%  slightly from the real value
%  The algorithm shall only be executed inside the analysis folder
%  Not tested yet in Linux
%  Simulations are not fully accurat
%
% Samuel Plazas (PA1/PA2/TG) - Juan Jose Cadavid(Master thesis) - 2018/2019

%%%%%%%%%%%%%%%%%%%%%%%%%%% PHASE MASK GENERATION ON THE SLM's 
%% Parameters and initialization
clc; clear; close all; % Initialization
Parameters; % Adds to the algorithm all the needed parameters
% open Parameters; % Keep open always

%% Directories and add functions
analysDir = pwd; cd ..; % Store script directory
cd(toolsFldr); toolsDir = pwd; cd ..; % Store function directory
cd(dataFlrd); dataDir = pwd;  cd ..; % Store data directory
cd(outFlrd); outDir = pwd; cd ..; % Store output directory
addpath(genpath(toolsDir)); cd(analysDir); % Add all folders in functions
% restore back default paths, type: restoredefaultpath

%% Spatial definitions
sSize = 2^k-1; % Number of samples; odd number so that vortex gets
               % centered (spatial size); Spatial size. ref: 2^k-1
SpatialSupport = SpatialSupport/2; % Half support of the SLM window in cm
spaceVector = -SpatialSupport:2*SpatialSupport/(sSize-1):SpatialSupport; % Symmetric space
[X,Y] = meshgrid(spaceVector); % A symmetric grid: 2D Cartesian coordinates
[phi,r] = cart2pol(X,Y); % Polar coordinates
x = spaceVector; % Cartesian x-vector
y = x; % Cartesian y-vector

%% Plot one mask for tests: phase mask selection
PhaseMaskSel; % Selects the type of phase mask.
              % The variables "mask" and "maskName" are outputs here

%% Phase mask plot on the screen or on the SLM
%%% Plot phase mask on the Fourier plane of the vortex coronagraph
f_fig_maskSLM(x,y,r,mask,m,n,a,b,gl,abs_ang,binMask,plotMask);




%%%%%%%%%%%%%%%%%%%%%%% MEASUREMENTS BY AN AUTOMATED PARAMETER VARIATION
if meas == 1
%% Folders and register creations on Data and Output    
FoldersRegistersCreation;

%% Hardware initialization
% HardwareInit; % Future script % Turns the camera on and create all the needed vars
                % Remember to leave the preview open
%[vid,src] = f_selectCamera(camera,exposure,format);
% Use vid.FramesPerTrigger = 1; ??


%% Measurement debugging
% f_ImageCapture(vid,dataDir,filename);
% Frame = f_GetFrame(vid);

% f_CameraShot(); % Future script % Takes a photo, shows a figure and saves it as shot.png
% Usefull for aligning the vortex and adjusting exposure parameters

%% Reference measurement
% Null tc beam or a high tc beam (long radius)

%% Automated measurement
AutomatMeasure; % Future script

%% Post-processing of the data
% DataProcessing; % Future script
for idxgral = 1:totalImgs
    cd(DatalogDir); % Goes to the data log directory
    A = load(MeasInfo{idxgral},'A');
    cd(ProcessedDir); % Goes to the output directory
    A = A'; % Processing of the image
    save(['processed_' MeasInfo{idxgral}],'A');
end

%% Save data
% SaveData; % Future script

%% Termination
% Terminate_settings; % Future script % Clears variables and closes all; deactivates camera
% delete(vid); % Clean up the camera

%% End notification
if beepSound == 1
    for beepTimes = 1:3
        beep();
        pause(0.2);
    end
end

end




%%%%%%%%%%%%%%%%%%%%%%% ACADEMIC PURPOSES: Zernike, simulation
% abs(mask) should always be 1, meaning that it is normalized; try by yourself

%% Optional FT
if FTmask == 1
    maskFT; % Performs the FFT of the mask and shows x and y profiles
end

%% Reconstruction of the mask with Zernike polynomials
if maskZernReconstr == 1
    f_Zernike_Reconstruction(14,angle(mask),1);
end

%% Simulation
if sim == 1
Simulation; % Executed if desired on the parameters
end